#+TITLE Homework 3

/Due:/ February 13 at 9:05am

* Setup
In this assignment you will add some modifications to the source files
you submitted for [[../mult-part-1/][Mult - Part 1]].  If you didn't fully complete or
understand that assignment be sure to review the solutions and ask
your classmates or me for clarification before moving on to this one.

* Introduction

Recall that when a process starts up on a Unix machine the kernel assigns three
default input/output streams to it. These are:

-  /standard input/ (input: defaults to the keyboard)
-  /standard output/ (output: defaults to the terminal screen)
-  /standard error/ (output: defaults to the terminal screen)

In the first part of this assignment you created three programs:
=mult.sh=, =mult.py= and =mult.cc= that read data from /standard in/
and wrote data to /standard out/.  We will expand on that idea and also
write to /standard error/.

* Assignment
** Overview

The final product of this assignment will be three source files:
=mult.sh=, =mult.py= and =mult.cc= in the base directory of your git
repo. The base directory is the directory that contains the =.git=
directory. Double check that your source files are in the base
directory of your repo (most were) and use =git mv= to move files into
the base directory if they were not already.  If you had to move files
around, commit those changes now with a =git commit=, before going on
to the next step in the assignment.

** Research

Each language has its own philosophy for dealing with error
conditions.  Some use return codes, others use exceptions. Still
others expect pieces of the program to crash and handle the
crashes. Sometimes the language may be built in such a way to
encourage certain types of error handling, other times there may be no
constraints on the programer.  Learn about the error handling
techniques you have available to you in C++, Python and bash.  Try to
determine if each language has a preferred method of handling errors.

For each of Python, C++ and bash:
  - learn how to write if/then/else statements
  - learn how to check for an error when trying to convert a string to an integer
  - learn how to write a message to /standard error/ (file descriptor 2)

** Add Error Checking and Reporting
Add basic error checking to =mult.sh=, =mult.py= and =mult.cc=.  Each
program should check that each line read in is really an integer
value.  If a line is read that can *not* be converted to an integer, the program should write a message to /standard error/ that says

#+begin_example
warning: line #: cannot convert to an integer
#+end_example

where =[line]= is replaced with the actual line that cause the trouble.  The the program should continue reading the next line.  The final product should be the product of all valid integers that were entered.  For example

#+begin_example
$ ./mult
3<ENTER>
2<ENTER>
five<ENTER>
mult:3: cannot convert to an integer
-1<ENTER>
^D
-6
$
#+end_example

*Note for Python:* Python's buffering shenanigans will once again require that you press =^D= twice 
And as before, you should still be able to redirect a file to the /standard input/ of your program:

#+begin_example
$ cat numbers
3
2
five
-1
$ ./mult < numbers
warning: cannot convert to an integer: five
1
$
#+end_example

And because the output is still written to /standard out/ and the
warning is written to /standard error/, you should be able to redirect
one or the other or both to files:

#+begin_example
$ ./mult < numbers > mult.out
mult:3: warning: cannot convert to an integer
$ cat mult.out
1
$ ./mult < numbers 2> mult.error
1
$ cat mult.error
warning: cannot convert to an integer: five
$
#+end_example

** README
For this and all future assignments, if you have notes that don't
really belong in code comments, feel free to include a =README= or
=README.md= file in the base directory of your repo.  You can use this
file to include any special instructions for the users of your program
(there shouldn't be any special instructions needed for this
assignment!), and to mention known bugs, for instance, if error
checking is working as you expect in =mult.py= and =mult.sh=, but not
as you expect, or at all in =mult.cc= then make a note of that in the
=README=.

* Grading and Submission

In addition to proper functionality described by the assignment I will be looking for:

- proper use of /standard in/, /standard out/ and /standard error/
- demonstrate understanding of error handling philosophy for each language
- readable code
- elegant solutions

- Make sure you have added and committed your final changes to your repository (=git status= should report a clean working directory).  

- =git log= should report at least one additional commit compared to what you submitted for part 1, more commits are ok of course.

Once you have added and committed all your changes, run the following command from your working directory:

#+BEGIN_EXAMPLE
    $ git push
#+END_EXAMPLE

If you get a message from git indicating it doesn't know which branch you want to push, or which remote you want to push to, then instead run

#+begin_example
    $ git push --set-upstream origin master
#+end_example

and next time you should only have to use =git push=.

If the command executes without any errors you should be
done. Remember, you can always clone your repo into a new location to
see exactly what state it is on the server.

#+begin_example
$ cd /tmp
$ git clone [full repo url]
$ cd mult
$ ls
mult.cc  mult.py  mult.sh  README
$
#+end_example

Once again, check that your three source files are in the base directory of your repo!
