#+TITLE: Resources

* shell
** Commands (and options) you should absolutely know without even thinking about them
- =man= (and how to scroll through man pages and search for strings)
- =cd=
- =ls= (=-l=, =-a=)
- =cp=
- =mv=
- =rm=
- =cat=
- =echo=

** Commands (and options) you should be able to quickly recall without much thought
- =pwd=
- =ln= (=-s=)
- =find= (=-name=, =-type=)
- =grep= (=-E=) [fn:knowingsed]
- =sed= (=-r=, ='s/regex/replacement/'=, ='/regex/d'= )[fn:knowingsed]
- =ssh [user@]hostname [command]= [fn:knowingssh]
- =git= (=init=, =clone=, =add=, =commit=, =push=, =pull=)
- =wc= 
- =sort=

Before stressing out (too much), please read the footnotes.

** Commands that may be useful to recall and quickly check the =man= page for
- =od=
- =cut=
- =uname=
- =xargs=
** know thy pipelines and redirects
Even if you don't know anything about commands =A= or =B= you should have a good understanding of what the following bash syntax means (=$= is just the prompt) and be able to describe in words what is happening to the input and output of =A= and =B= in each case:

- =$ A <somefile=
- =$ B >somefile=
- =$ B >&2=
- =$ A | B=
- =$ A | B >somefile=
- =$ A 2>afile | B >anotherfile=

[fn:knowingsed] Note that knowing what =sed s/regex/replacement/= and =grep= do without thinking about it does /not/ necessarily mean you will always know what the regular expressions used with =sed= and =grep= are doing without thinking about it.  =sed=, =grep=, and regular expressions are three different tools.  Also, =sed= has many different commands that may be useful but don't necessarily need to take up quick-access brain space, just know how to use =man=.  See the section on regular expressions to have a good idea of the types of regular expressions you should be able to understand without much thought.

[fn:knowingssh] =ssh= is another command that has a huge number of uses and options. Know that it is used for running commands on a remote machine, or connecting to a shell on a remote machine, in addition to many other uses that we will probably not cover in this course.

** syntax you should be very familiar with
- [username@]hostname[:pathname], e.g. what is the username, hostname and path in =ece2524git@ece2524.ece.vt.edu:solutions/mult.git=?
 

** Commands you should have a very good understanding of what they do and how they are used, but may have to 
* =git=
** Repos of note
- ece2524git@ece2524.ece.vt.edu:ece2524.git :: source for all published class material, example files and programs
- ece2524git@ece2524.ece.vt.edu:assignments/CREATOR/mult.git :: remote for your mult assignment submission.  Replace =CREATOR= with your git username.
- ece2524git@ece2524.ece.vt.edu:solutions/mult.git :: solutions to the 'mult' assignment.  Parts 1-3 are [[http://git-scm.com/book/en/Git-Basics-Tagging][tagged]], run =git tag= to see a list of tags, checkout one of interest.
- ece2524git@ece2524.ece.vt.edu:assignments/CREATOR/task.git :: remote for your task assignment submission. Replace =CREATOR= with your git username.
- ece2524git@ece2524.ece.vt.edu:solutions/task.git :: solutions to 'task' assignment. Parts 1-3 are tagged.
- ece2524git@ece2524.ece.vt.edu:inclass/CREATOR/REPO.git :: template for inclass exercise submission, replace =CREATOR= with your git username and =REPO= with the proived name for the particular exercise.

** Learning/Practice
- [[http://pcottle.github.com/learnGitBranching/]] :: visual, real-time manipulation of a git tree. Use to gain an intuitive feel for branching and merging.

** Documentation
- http://git-scm.com/documentation

* =tmux=
** creating or attaching a session
- tmux new -s chat :: start a new session named 'chat'
- tmux a :: attach to a running session
- tmux a -t chat :: attach to a running session named 'chat' (becomes useful when you have multiple sessions running at once!)
** from within a running session
Tmux uses a /prefix/ key combination to tell it to interpret the next character you type as a command rather than send it to the terminal.  By default this prefix is =Ctrl+b= but many people remap it to =Ctrl+a= both because it is less awkward to type and because they might be coming from a history of using =screen= which used =Ctrl+a= as its prefix.  Here I will just use /prefix/, just replace it with whichever prefix you are using. 

- /prefix/ c :: create a new window
- /prefix/ " :: split pane vertically
- /prefix/ % :: split pane horizontally
- /prefix/ o :: cycle to *o*ther pane
- /prefix/ ? :: show current key bindings ('q' to quit) 
- /prefix/ d :: detatch from a running session, drops you back to a naked prompt
 
Note the 'Ctrl' key is only held down for the /prefix/, then released and the command letter is typed separately. Some commands, however will also use the Control key, shown as =C= in the online help. For instance

- /prefix/ C-o :: rotate-window

If your /prefix was the default 'Ctrl+b' then to call the 'rotate-window' command you would press 'Ctrl+b' followed by 'Ctrl+o', so you could keep the 'Ctrl' key pressed for the entire sequence.

For more, a whole lot more, [[http://blog.hawkhost.com/2010/06/28/tmux-the-terminal-multiplexer/][Hawk Host Blog - TMUX]] is a good place to start. 

* Regular Expressions (regex)
- [[http://www.debuggex.com/]] :: a super cool visual debugger. Do note the unsupported features to avoid frustration with regexs that "should work"
- [[http://www.cheatography.com/davechild/cheat-sheets/regular-expressions/][cheat sheet]] (also available as a [[http://www.cheatography.com/davechild/cheat-sheets/regular-expressions/pdf/][PDF]])

** regular expression syntax you should absolutely know without even thinking about it
- literal characters (e.g. 'cat')
- =.= :: wild card, matches any character except new line (=\n=)
- =[abx-z]= :: bracketed ranges, this example matches one of 'a' or 'b' or any in the range from 'x' to 'z'
- =[^abx-z]= :: negative bracketed ranges, this example matches any character /except/ 'a' or 'b' or any in the range from 'x' to 'z'
- =*= :: zero or more of the preceeding expression: =a*= matches zero or more 'a's, =[abx-z]*= matches zero or more of "a or b or anything in the range 'x' through 'z'"
- =?= :: zero or one of the preceeding expression (see previous example, replace =*= with =?= and "zero or more" with "zero or one")

** character classes you should have good understanding of
- =\w= :: word characters, equivalent to =[_a-zA-Z0-9]= (see bracketed ranges)
- =\s= :: a whitespace character (space, tab, etc.)
