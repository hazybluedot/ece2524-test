#+TITLE: make
#+AUTHOR: Darren Maczka
#+LaTeX_HEADER: \usepackage{xcolor}
#+LaTeX_HEADER: \usepackage{mathptmx}
#+LaTeX_HEADER: \usepackage{tikz}
#+LaTeX_HEADER: \usetikzlibrary{arrows}
#+LaTeX_HEADER: \usepackage{verbatim}
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [presentation]
#+BEAMER_FRAME_LEVEL: 2
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+BEAMER_HEADER_EXTRA: \usetheme{CambridgeUS}
#+COLUMNS: %45ITEM %10BEAMER_env(Env) %10BEAMER_envargs(Env Args) %4BEAMER_col(Col) %8BEAMER_extra(Extra)
#+PROPERTY: BEAMER_col_ALL 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 :ETC

* Introduction

** Recall: Anatomy of a Makefile

#+begin_example
myvar := "variable assignment"

target ... : prerequisites ...
    recipe
    echo $(myvar)  # variable usage (and a comment!)
    ...
    ...
#+end_example

- single TAB preceding /recipe/

* Activities
** Makefile for mult
*** get up-to-date version of =mult.cc= source with CLA parsing support
*** targets
- all :: 'mult' target is the only prerequisite
- mult :: make sure object file is built in a separate rule, and linked in this target
- clean :: remove any generated files (probably just object files)
*** considerations
- use a variable to define the library linking CLA

** Makefile for "What is Unix"
*** targets
- all :: generate both pdf and html
- pdf :: generate pdf output
- html :: generate html output
- publish :: generate pdf and html and copy output to a "output" directory set in a variable defined towards teh top of the Makefile
- clean :: remove any generated output, includeing pdf and html files, from the current directory (i.e. should not affect the "output" directory)

** create a test suite for =mult= (if time)
*** Use =unittest.sh= from the midterm as an example
*** Create the necessary test input and sample output files in a =test= subdirectory
*** script run four tests
- compiling =mult= 
- running =mult= with sample input (if compile was successful)
- running =mult.py= with sample input
- running =mult.sh= with sample input

*** print =PASS= or =FAIL= to indicate result of each test
*** add a =test= target to the =Makefile= that will run these tests when invoked
#+BEGIN_EXAMPLE
$ make test
#+END_EXAMPLE
